################################################################################
# D-LFS scripts
#
# Author: David W. Gay 
# See D-LFS.License for copyright details.
# Copyright applies recursively to every file in, and sub-directory of,
# the scripts directory, except for the misc directory.
#
# Indivudual scripts may contain computer instructions extracted from the book:
# Linux From Scratch.  Such content (c) Gerard Beekmans under the MIT License.

# D-LFS.functions  &  variables
#
# Uses bash only functionality. bc, perl, or other scripting tools may not be
# available during portions of build.
#

D_LFS_version=5.5.BETA

source ./D-LFS.config     #Get config values.

source misc/shell_colors  #Used to color text on screen



function Init_BUILD_LOGS {
   #Called right after BUILD_LOGS is declared, near the end of this file.
   #This function should only be called one time.
   #Used until the $LFS (/mnt/LFS) partition has been setup in 2.04
   #$TMP_BUILD_LOGS is set in D-LFS.config

   BUILD_LOGS_standard=$BUILD_LOGS #Used to move BUILD_LOGS after $LFS is ready
   BUILD_LOGS=$TMP_BUILD_LOGS      #Used until $LFS is ready.

   BUILD_INFO="${BUILD_LOGS}/BUILD_INFO"

   #if the file $BUILD_INFO exists, Init_BUILD_LOGS has already ran once
   if [ -f $BUILD_INFO ]; then  return 0;  fi;

   mkdir -pv  $TMP_BUILD_LOGS
 
   echo "INITIAL_START=\"$($TIMESTAMP_long)\"" >> $BUILD_INFO 
   echo "HOST=$(hostname)" >> $BUILD_INFO # or = "LFS-chroot"

   Calculate_SBUT  #Add up all the estimated SBUS from each pkg.
} #End Init_BUILD_LOGS



function log_start_time {
   TIME_START=`$TIMESTAMP`  #Also used in Calculate_ABUS_and_DIFF
   echo -n $PACKAGE_NUMB $SBUS $TIME_START" " >> $BUILD_TIMES
   Display_Estimated_Times_Package      | tee -a $BUILD_LOG
}



function log_end_time {
   TIME_END=`$TIMESTAMP`    #Also used in Calculate_ABUS_and_DIFF
   Calculate_ABUS_and_DIFF
   echo $TIME_END $ABUS $DIFF >> $BUILD_TIMES
}



function Enter_YES_to_continue {
   if [[ "$AUTO_BUILD" == 3 ]]; then return 0; fi

   read -p "Enter YES to continue, anything else to exit: " CONFIRM

   if [ "$CONFIRM" != "YES" ]; then
     echo
     echo '   EXITING...  YES NOT ENTERED.' | tee -a $BUILD_LOG
     echo
     exit 1
   fi
}



function Press_Enter_to_continue {
   if [[ "$AUTO_BUILD" == 3 ]]; then return 0; fi

   read -sp "Press Enter to continue: "
   echo -en "\r$BLANKLINE\r"
}



function Press_R_to_Review_build_log {
   if [[ "$AUTO_BUILD" == 3 ]]; then return 0; fi

  echo -n "Press r to review the package build log, anything else to continue: "
   read -n1 KEYPRESS
   if [ "$KEYPRESS" == "r" -o "$KEYPRESS" == "R" ]; then
      clear
      echo;echo;echo;echo;echo;
      echo "less will be used to view the log. When finished, press Q or q."
      echo
      echo -n "Press any key to continue... "
      read -n1 
      clear
      less -R $BUILD_LOG
   fi
   echo
}



function header {
   clear

   header_TITLE="D-LFS Scripts ${D_LFS_version}, LFS Book ${LFS_VERSION}"
   WHOatHOST="(user: ${YELLOW}`whoami 2>/dev/null`@${HOST}${NORMAL})"
   PAD_LEN=$[ 80 - ${#header_TITLE} - ${#WHOatHOST} + 11 ] #+11 adj for colors
   PAD=${BLANKLINE:0:$PAD_LEN}  #Right justifies (user: who@host)

   echo $DIVIDER                                           | tee -a $BUILD_LOG
   echo -e "$header_TITLE $PAD $WHOatHOST"                 | tee -a $BUILD_LOG
   echo "$PACKAGE_NUMB : $PACKAGE_NAME $PACKAGE_DESC"      | tee -a $BUILD_LOG
   echo "                                 started        (1 SBU =   $SBU_long)"\
        "est. finish" | tee -a $BUILD_LOG

   Press_Enter_to_continue #pause here, before log_start_time

   Display_Estimated_Times_Total                           | tee -a $BUILD_LOG

   #A few pkg's don't log time, such as the 6.04 & 6.65 chroots.
   #A few others log_start_time sometime after the header (may have a prompt)
   #So, in general, log_start_time unless $1=0
   if [ "$1" != "0"  ]; then log_start_time; fi 

   echo $DIVIDER                                           | tee -a $BUILD_LOG
} #End header



function prepare_package {
   local  TAR_ERR  CD_ERR  CD_ERR2  last_logged_pkg  log_time=""

   echo "Extracting $PACKAGE_FILE..." | tee -a $BUILD_LOG
   cd   $LFS_SOURCES                       &>> $BUILD_LOG  
   CD_ERR=$?
   tar -xf $PACKAGE_FILE                   &>> $BUILD_LOG 
   TAR_ERR=$?
   cd      $PACKAGE_NAME                   &>> $BUILD_LOG
   CD_ERR2=$?

   #Check for and abort on any error.
   if [[ ($TAR_ERR != 0) || ($CD_ERR != 0) || ($CD_ERR2 != 0) ]]; then
      echo "Error during tar or cd of prepare_package."  >> $BUILD_LOG
      echo -en $BOLD
      grep  " cd: "   $BUILD_LOG
      grep  "^tar: "  $BUILD_LOG
      echo -en $NORMAL

      #If start time not logged, set $log_time=0 to not log_end_time in footer.
      last_logged_pkg=`tail -n1 $BUILD_TIMES`
      last_logged_pkg=${last_logged_pkg:0:4} #get X.xx of last logged time.
      if [[ $last_logged_pkg != $PACKAGE_NUMB ]]; then log_time=0; fi

      footer $log_time
      exit #This will also end auto-builds.
   fi #End if errors

   #Sometimes, the this message is not needed yet.
   if [ "$1" != "0"  ]; then echo "Building package..." | tee -a $BUILD_LOG; fi 
} #End prepare_package



function cleanup {
   echo 'Cleaning up...' | tee -a $BUILD_LOG
   #When this function is called, the pwd may still be a sub-directory of 
   #sources/$PACKAGE_NAME. (not all pkg's return to the same dir they started)
   cd $LFS_SOURCES            2>> $BUILD_LOG  
   rm -rf $PACKAGE_NAME       2>> $BUILD_LOG  
   rm -rf $BUILD_DIR          2>> $BUILD_LOG  
}



function footer {
   #A few pkg's don't log time (chroots), or log it before the footer.
   if [ "$1" != "0" ]; then log_end_time; fi  #if $1=0, don't log end time

   #Show errors, except ignored errors.
   echo -en $BOLD
   grep -n "Error "  $BUILD_LOG | sed '/ignored/d' 
   grep -n "Stop."   $BUILD_LOG
   echo -en $NORMAL

   { #braces group command output
     echo $DIVIDER
     echo -n "$PACKAGE_NUMB : Done      :  `$TIMESTAMP_long`"
     ELAPSEDINFO=",  $ABUS ABUs   $ELAPSED_long"
     if [[ "$ABUS" != "" ]]; then  echo "$ELAPSEDINFO";  else echo;  fi
     echo $DIVIDER
   } | tee -a $BUILD_LOG  #close group, save output

   Press_R_to_Review_build_log
   echo                                                   >> $BUILD_LOG
} #End footer



function header_log_prep {
   header
   prepare_package
}



function cleanup_log_footer {
   cleanup
   footer
}



function Build_Common_Package {
   header_log_prep
   ./configure --prefix=$1  $2  $3  &>> $BUILD_LOG 
   make                             &>> $BUILD_LOG
   make install                     &>> $BUILD_LOG
   cleanup_log_footer
}



function Prep_chroot_for_supergo {
   # Called in supergo-all
   # Add lines to $LFS/root/.profile that will start supergo6 or 7,
   # next time only, upon entering the 6.04 or 6.65 Chroot.
   #
   echo "rm /root/.profile"   >  $LFS/root/.profile
   echo "cd $LFS_SCRIPTS"     >> $LFS/root/.profile
   echo "0/supergo$1"         >> $LFS/root/.profile
   echo "logout"              >> $LFS/root/.profile
}



function Prepare_chroot_profile {
   # Called in 6.04 & 6.65 before the chroots
   #(The .profile lines below are only realized if supergo-all is not used.)
   #
   echo "sed -i '/#REMOVE#/d' /root/.profile 2>/dev/null" >> $LFS/root/.profile
   echo "cd $LFS_SCRIPTS           #REMOVE#"              >> $LFS/root/.profile
   echo "source $BUILD_INFO        #REMOVE#"              >> $LFS/root/.profile
   echo "source misc/profile       #REMOVE#"              >> $LFS/root/.profile
}



function Change_HOST_to {  #Changes HOST to reflect if in chroot
   sed -i '/^HOST=/d' $BUILD_INFO   #Remove current value
   HOST=$1                          #Set new value
   echo HOST=$HOST >> $BUILD_INFO   #Save new value
}



# Bash math notes:
# Bash only does integer math (NO decimal points), and does not round.
#  (ex: 2 + .1 = an error, 9 / 10 = 0, etc...) 
# Removing the decimal point makes an integer, and effectively multiplies by 10.
#  (or more, depending on number of digits after the decimal)
# Base 8 (octal) vs Base 10: Bash may assume octal if a value has a leading 0.
#  For ex: $[ 08 ] will generate errors as 08 is not a valid octal number.
#  So, prepend 10# to ensure base 10. ex: 10#$VAR
# ${#VAR} = length of the value of VAR

function Calculate_SBU {
   #Should only be called at end of 5.04

   #Even tho TIME_END is also set in log_end_time in the footer of 5.04, 
   #set it here so we can calc SBU before log_end_time,
   #so we can calc ABUS and DIFF in log_end_time for 5.04.
   TIME_END=`$TIMESTAMP` 
   SBU_=$[ $TIME_END - $TIME_START ]   #TIME_START from log_start_time
   SBU_long="`date -ud @$SBU_ +:%M:%S`"    # :00:00
   echo "SBU_=$SBU_"             >> $BUILD_INFO
   echo "SBU_long=$SBU_long"     >> $BUILD_INFO

   #SBUS_0 is used in header when a package's SBUS is < .1
   SBUS_0=$[ (SBU_ ) / 19 ]  # ~= .05 SBU, slightly rounded up
   SBUS_0_long="`date -ud @$SBUS_0 +%T`" 
   echo SBUS_0=$SBUS_0           >> $BUILD_INFO
   echo SBUS_0_long=$SBUS_0_long >> $BUILD_INFO

   Calculate_Estimated_Build_Time_Total

} #End Calculate_SBU



function Calculate_SBUT {
   # Sum of SBUS from all packages = SBUT (SBU's Total)
   # Called at end of Init_BUILD_LOGS, on first run of D-LFS.functions only.
   # Note: while $BUILD_LOGS has been setup at this point, $BUILD_LOG has not.

   #only want raw matched lines, so make sure color etc. is off. 
   unalias grep     2>/dev/null #discard error if grep not aliased

   # Get SBUS="nn.n" lines from scripts (the lines may also have a #comment)
   #   The B/ folder, used for "Beyond LFS" scripts, is not counted.
   # Remove quotes & decimal point (Makes an integer and multiplies by 10)
   # Remove any #comment
   # Remove SBUS=
   # Save to a new file, writing one value per line of form: nnn  (or just nn)
   grep -h -e "^SBUS=" {4,5,6,7}/*    | \
   sed 's/"//g'                       | \
   sed 's/\.//'                       | \
   cut -d"#" -f1                      | \
   cut -d"=" -f2 > $BUILD_LOGS/SBUTx10.list

   # Now add them all up
   SBUTx10=0   # Initialize
   while read LINE ; do
      SBUTx10=$[ $SBUTx10 + 10#$LINE ] 
   done < $BUILD_LOGS/SBUTx10.list
   rm  $BUILD_LOGS/SBUTx10.list  #done with this file

   SBUT=$[ $SBUTx10 / 10 ].$[ $SBUTx10 % 10 ]

   echo "SBUT=$SBUT"       >> $BUILD_INFO
   echo "SBUTx10=$SBUTx10" >> $BUILD_INFO

} #End Calculate_SBUT 



function Calculate_Estimated_Build_Time_Package {
   # Figures EBTP & EFTP (Estimated Build & Finish Times) for current package

   if [ "$SBUS" == "0.0" ]; then
      EBTP=SBUS_0
      EBTP_long=$SBUS_0_long
   else
      #SBUS set in each calling script. Format is "n.n" or "nn.n"
      #Remove decimal point. (Makes an integer and effectively multiplies by 10)
      SBUSx10=`echo $SBUS | sed 's/\.//'` 

      EBTP=$[ ($SBU_ * 10#$SBUSx10 + 5) / 10 ] #Rounds last digit. 
      EBTP_long=`date -ud @$EBTP "+%T"`
   fi

   EFTP=$[ $EBTP + `$TIMESTAMP` ]         #Est Build Time + current time 
   EFTP_long=`date -d @$EFTP "+%T %Z"` 

} #End Calculate_Estimated_Build_Time_Package



function Calculate_Estimated_Build_Time_Total {
   # Figures EBTT & EFTT (Estimated Build & Finish Times) for entire build.
   # Requires SBU to already be determined.
   # Called at end of Calculate_SBU

   cd $BUILD_LOGS

   #EBTT = Est Build Time, Total
   EBTT=$[ ($SBU_ * $SBUTx10 + 5) / 10 ]
   EBTT_long=`date -ud @$EBTT +%T`
   echo "EBTT_long=$EBTT_long" >> $BUILD_INFO

   #EFTT = Est Finish Time, Total
   EFTT=$[ $EBTT + $START_TIME ]
   EFTT_long=`date -d @$EFTT "+%T %Z"`
   echo EFTT_long=\"$EFTT_long\" >> $BUILD_INFO

   cd $LFS_SCRIPTS
} #End Calculate_Estimated_Build_Time_Total



function Display_Estimated_Times_Total {
   # Display Estimated Times for Entire Build
 
   echo -n "Entire LFS system:  $START_TIME_long, $SBUT SBUs"
 
   #Check if SBU has been determined (by 5.04).
   if [[ $SBU_ -le "0" ]] ; then  #can't display estimated times...
      echo "  (est. times unavailable)"
   else
      echo " = $EBTT_long, $EFTT_long"
   fi

} #End Display_Estimated_Times_Total



function Display_Estimated_Times_Package {
   #Called in function log_start_time 

   PAD=" "  #Spacing for displaying SBUS: 1 if n.nn, 0 for nn.nn
   if [ ${#SBUS} -eq 4 ]; then PAD=""; fi

   ST=`$TIMESTAMP_long` #Start Time for Current Package (now)
   echo -n "Current package  :  $ST,$PAD $SBUS SBUs"

   #Check if SBU has been determined (by 5.04).
   if [[ $SBU_ -le "0" ]] ; then  #can't display estimated times...
      echo "  (est. times unavailable)"
      return 0
   fi

   Calculate_Estimated_Build_Time_Package  #Determines EBTP & EFTP

   if [ "$SBUS" == "0.0" ]; then EQ="<"; else EQ="="; fi
   echo    " $EQ $EBTP_long, $EFTP_long"

} #End Display_Estimated_Times_Package



function Calculate_ABUS_and_DIFF {
   # ABUS = Actual Build UnitS to build this package
   # DIFF = ABUS - SBUS
   # called by log_end_time, saved to BUILD_TIMES

   # TIME_{START,END} are set in functions log_{start,end}_time
   ELAPSED=$[ 10#$TIME_END - 10#$TIME_START ]
   ELAPSED_long=`date -ud @$ELAPSED +%H:%M:%S`

   if [[ $SBU_ -le "0" ]] ; then   #check if SBU has been determined
      ABUS=000                     #If not, use "000" (instead of "0.0")
      DIFF=$SBUS
      return
   fi

   ABUSx10=$[ (($ELAPSED * 100) / $SBU_ + 5) / 10]
   ABUS=$[ $ABUSx10 / 10 ].$[ $ABUSx10 % 10 ]

   SBUSx10=`echo $SBUS | sed 's/\.//'`
   DIFFx10=$[ 10#$ABUSx10 - 10#$SBUSx10 ]
   if [[ $DIFFx10 -ge 0 ]]; then   NEG="";        #To avoid "DIFF=-0.-1",
   else NEG="-"; DIFFx10=$(( -1*DIFFx10 )); fi    #if DIFF<0, make DIFF pos &
   DIFF=$NEG$[ $DIFFx10 / 10 ].$[ $DIFFx10 % 10 ] #use $NEG for sign

} #End Calculate_ABUS_and_DIFF



function Calculate_ABUT_and_ABTT {   #Called from summary screen.
   # Calculates Actual Build Units Total & Actual Build Time Total.  
   # Sums actual times to build all packages. (data from BUILD_TIMES)
   # BUILD_TIMES are in seconds

   TOTAL_TIME=0
   PACKAGE_TIME=0

   while read LINE ; do
      TIME_START=`echo $LINE | cut -d" " -f3`  #
      TIME_END=`  echo $LINE | cut -d" " -f4`  #
      PACKAGE_TIME=$[ 10#$TIME_END - 10#$TIME_START ] #the 10# ensures base 10
      TOTAL_TIME=$[ $TOTAL_TIME + $PACKAGE_TIME ]
   done < $BUILD_TIMES  #Package SBUS TIME_START TIME_END ABUS DIFF

   ABTT=$TOTAL_TIME
   ABTT_long=`date -ud @$TOTAL_TIME +%H:%M:%S`   #Used on summary screen

   # Convert ABTT (seconds) to Actual Build Units Total
   ABUTx10=$[ (($TOTAL_TIME * 100) / $SBU_ + 5) / 10]
   ABUT="$[ $ABUTx10 / 10 ].$[ $ABUTx10 % 10 ]"  #Used on summary screen

} #End Calculate_ABUT_and_ABTT



########################################
# D-LFS global variables

DIVIDER="================================================================================"
BLANKLINE="                                                                                "

# Using eval in the following variables causes a current "date" to be returned 
# by the variable each time it is referenced as `$TIMESTAMP` or $($TIMESTAMP)
# Without the back-ticks or $(), the variable just returns the string as below.
TIMESTAMP_long='eval date "+%F %T %Z"'  #yyyy-mm-dd 24:mm:ss LTZ
TIMESTAMP='eval date -u +%s'            #in seconds for easier math later

AUTO_BUILD_desc[1]="manual/Single Action build."
AUTO_BUILD_desc[2]="Semi-Auto build."
AUTO_BUILD_desc[3]="Full-Auto build."


PACKAGE_SCRIPT=`basename $0`  #Remove path, leave 1.23_Pkgname
  #in Bash, $0 (or ${0}), is the "path/filename" being run, as called.
  #basename removes "path/", leaving just the filename.
  #(in these scripts, path should only be ./, 0/, 4/, 5/, 6/, 7/, or B/)


PACKAGE_NUMB=${PACKAGE_SCRIPT:0:4} # 1.23 (ie, chapter.section)
  #${VAR:0:4}  Starting at offset 0, returns a 4 character substring of $VAR


#These are set in each N.nn_package_script:
# PACKAGE_NAME="package_file_name-1.2.3"
# PACKAGE_FILE="${PACKAGE_NAME}.tar.gz"  # could also end in .bz2, .xz, etc
# PACKAGE_DESC=""
# SBUS="0.0" 


#D_LFS_WORKING_DIR, similar to tools, will have a symlink on "/" of the host.
D_LFS_WORKING_DIR="/${WORKING_BASE}"

LFS_SCRIPTS="${D_LFS_WORKING_DIR}/scripts"
LFS_SOURCES="${D_LFS_WORKING_DIR}/sources"
BUILD_LOGS="${D_LFS_WORKING_DIR}/build_logs"

#Some packages use a build dir seperate from their source dir
BUILD_DIR="${LFS_SOURCES}/BUILD_DIR.${PACKAGE_NUMB}"

#See if the $BUILD_LOGS directory exists. If not, setup & use a tmp location.
if [ ! -d $BUILD_LOGS ]; then  Init_BUILD_LOGS;  fi

BUILD_LOG="${BUILD_LOGS}/${PACKAGE_SCRIPT}.log"

BUILD_INFO="${BUILD_LOGS}/BUILD_INFO"

#$BUILD_TIMES: Package, Est SBUS, Start time, End time, Actual SBUS, Act-Est
#   Format ex: 1.23 12.3 1234567890 1234567890 12.4 0.1
BUILD_TIMES="${BUILD_LOGS}/BUILD_TIMES"


#get various build time values
source $BUILD_INFO  2>/dev/null #discard error if $BUILD_INFO not yet ready

#
# END D-LFS.functions 
################################################################################
